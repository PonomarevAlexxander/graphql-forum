package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"log/slog"

	"github.com/PonomarevAlexxander/graphql-forum/internal/config"
	"github.com/PonomarevAlexxander/graphql-forum/internal/converter"
	"github.com/PonomarevAlexxander/graphql-forum/internal/dataloader"
	"github.com/PonomarevAlexxander/graphql-forum/internal/errlib"
	"github.com/PonomarevAlexxander/graphql-forum/internal/gql/model"
	exec "github.com/PonomarevAlexxander/graphql-forum/internal/gql/runtime"
)

// Author is the resolver for the author field.
func (r *postResolver) Author(ctx context.Context, obj *model.Post) (model.UserResolvingResult, error) {
	dataLoader := ctx.Value(config.DataLoadersContextKey).(*dataloader.DataLoaders).UserByPostId

	user, err := dataLoader.Load(dataloader.DataLoaderByIdKey{ID: obj.ID})
	if err != nil {
		slog.Error(
			"Some error while trying to fetch Author from post",
			"error", err.Error(),
		)

		if errors.Is(err, errlib.ErrNotFound) {
			return model.NotFoundError{Message: err.Error()}, nil
		}
		return model.InternalError{Message: err.Error()}, nil
	}

	return converter.DomainToGqlUser(user), nil
}

// Post returns exec.PostResolver implementation.
func (r *Resolver) Post() exec.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
