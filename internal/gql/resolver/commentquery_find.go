package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"log/slog"

	"github.com/99designs/gqlgen/graphql"
	"github.com/PonomarevAlexxander/graphql-forum/internal/config"
	"github.com/PonomarevAlexxander/graphql-forum/internal/converter"
	"github.com/PonomarevAlexxander/graphql-forum/internal/dataloader"
	"github.com/PonomarevAlexxander/graphql-forum/internal/errlib"
	"github.com/PonomarevAlexxander/graphql-forum/internal/gql/model"
	"github.com/PonomarevAlexxander/graphql-forum/internal/gql/runtime"
	"github.com/google/uuid"
)

// Replies is the resolver for the replies field.
func (r *commentFindElementResolver) Replies(ctx context.Context, obj *model.CommentFindElement, first *uint, after *string) (model.CommentsConnectionResolvingResult, error) {
	slog.Debug("Fetching Replies...")
	dataLoader := ctx.Value(config.DataLoadersContextKey).(*dataloader.DataLoaders).CommentByParentId

	commentId, ok := graphql.GetFieldContext(ctx).Parent.Args["commentId"].(uuid.UUID)
	if !ok {
		slog.Error("Some error while trying to fetch Replies", "error", "invalid id type")
		return model.InternalError{Message: errlib.ErrInternal.Error()}, nil
	}

	comments, err := dataLoader.Load(dataloader.DataLoaderByIdKey{ID: commentId})
	if err != nil {
		slog.Error(
			"Some error while trying to fetch Replies",
			"error", err.Error(),
		)
		if errors.Is(err, errlib.ErrNotFound) {
			return model.NotFoundError{Message: err.Error()}, nil
		}
		return model.InternalError{Message: err.Error()}, nil
	}

	var connection model.CommentsConnection

	connection.Edges = converter.DomainCommentsToGqlEdges(comments)
	connection.PageInfo = converter.DomainCommentsToGqlPageInfo(comments)

	return connection, nil
}

// Find is the resolver for the find field.
func (r *commentQueryResolver) Find(ctx context.Context, obj *model.CommentQuery, commentID uuid.UUID) (model.CommentFindResult, error) {
	comment, err := r.s.Comment.Get(ctx, commentID)

	if err != nil {
		slog.Error(
			"Some error while trying to find Comment",
			"error", err.Error(),
		)

		if errors.Is(err, errlib.ErrNotFound) {
			return model.NotFoundError{Message: err.Error()}, nil
		}
		return model.InternalError{Message: err.Error()}, nil
	}

	return model.CommentFindElement{
		Comment: converter.DtoToGqlComment(comment),
	}, nil
}

// CommentFindElement returns runtime.CommentFindElementResolver implementation.
func (r *Resolver) CommentFindElement() runtime.CommentFindElementResolver {
	return &commentFindElementResolver{r}
}

type commentFindElementResolver struct{ *Resolver }
