package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"errors"
	"log/slog"

	"github.com/99designs/gqlgen/graphql"
	"github.com/PonomarevAlexxander/graphql-forum/internal/config"
	"github.com/PonomarevAlexxander/graphql-forum/internal/converter"
	"github.com/PonomarevAlexxander/graphql-forum/internal/dataloader"
	"github.com/PonomarevAlexxander/graphql-forum/internal/errlib"
	"github.com/PonomarevAlexxander/graphql-forum/internal/gql/model"
	"github.com/PonomarevAlexxander/graphql-forum/internal/gql/runtime"
	"github.com/google/uuid"
)

// Author is the resolver for the author field.
func (r *commentResolver) Author(ctx context.Context, obj *model.Comment) (model.UserResolvingResult, error) {
	slog.Debug("Fetching Author...")

	dataLoader := ctx.Value(config.DataLoadersContextKey).(*dataloader.DataLoaders).UserByCommentId

	user, err := dataLoader.Load(dataloader.DataLoaderByIdKey{ID: obj.ID})
	if err != nil {
		slog.Error("Some error while trying to fetch Author", "error", err.Error())
		switch {
		case errors.Is(err, errlib.ErrNotFound):
			return model.NotFoundError{Message: err.Error()}, nil
		}
		return model.InternalError{Message: err.Error()}, nil
	}

	return converter.DomainToGqlUser(user), nil
}

// Replies is the resolver for the replies field.
func (r *commentEdgeResolver) Replies(ctx context.Context, obj *model.CommentEdge, first *uint, after *string) (model.CommentsConnectionResolvingResult, error) {
	slog.Debug("Fetching Replies...")
	dataLoader := ctx.Value(config.DataLoadersContextKey).(*dataloader.DataLoaders).CommentByParentId

	comment, ok := obj.Comment.(model.Comment)
	if !ok {
		slog.Error("Some error while trying to fetch Replies", "error", "invalid type")
		return model.InternalError{Message: errlib.ErrInternal.Error()}, nil
	}

	comments, err := dataLoader.Load(dataloader.DataLoaderByIdKey{ID: comment.ID})
	if err != nil {
		slog.Error(
			"Some error while trying to fetch Replies",
			"error", err.Error(),
		)
		if errors.Is(err, errlib.ErrNotFound) {
			return model.NotFoundError{Message: err.Error()}, nil
		}
		return model.InternalError{Message: err.Error()}, nil
	}

	var connection model.CommentsConnection

	connection.Edges = converter.DomainCommentsToGqlEdges(comments)
	connection.PageInfo = converter.DomainCommentsToGqlPageInfo(comments)

	return connection, nil
}

// TotalCount is the resolver for the totalCount field.
func (r *commentsConnectionResolver) TotalCount(ctx context.Context, obj *model.CommentsConnection) (model.TotalCountResolvingResult, error) {
	var id uuid.UUID

	commentId, okId := graphql.GetFieldContext(ctx).Parent.Parent.Args["commentId"].(uuid.UUID)
	edge, okEdge := graphql.GetFieldContext(ctx).Parent.Args["obj"].(*model.CommentEdge)

	switch {
	case okId:
		id = commentId
	case okEdge:
		comment, ok := edge.Comment.(model.Comment)
		if !ok {
			slog.Error(
				"Some error while trying to fetch TotalCount",
				"error", "invalid Comment type",
			)
			return model.InternalError{Message: errlib.ErrInternal.Error()}, nil
		}

		id = comment.ID
	default:
		slog.Error(
			"Some error while trying to fetch TotalCount",
			"error", "invalid Id type",
		)
		return model.InternalError{Message: errlib.ErrInternal.Error()}, nil
	}

	count, err := r.s.Comment.CountByParentId(ctx, id)
	if err != nil {
		slog.Error(
			"Some error while trying to fetch TotalCount",
			"error", err.Error(),
		)
		return model.InternalError{Message: err.Error()}, nil
	}

	return model.TotalCount{
		Value: count,
	}, nil
}

// Comment returns runtime.CommentResolver implementation.
func (r *Resolver) Comment() runtime.CommentResolver { return &commentResolver{r} }

// CommentEdge returns runtime.CommentEdgeResolver implementation.
func (r *Resolver) CommentEdge() runtime.CommentEdgeResolver { return &commentEdgeResolver{r} }

// CommentsConnection returns runtime.CommentsConnectionResolver implementation.
func (r *Resolver) CommentsConnection() runtime.CommentsConnectionResolver {
	return &commentsConnectionResolver{r}
}

type commentResolver struct{ *Resolver }
type commentEdgeResolver struct{ *Resolver }
type commentsConnectionResolver struct{ *Resolver }
